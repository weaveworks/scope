version: 2

defaults: &defaults
  working_directory: /go/src/github.com/weaveworks/scope
  docker:
    - image: weaveworks/scope-backend-build:master-fda40b83

client-defaults: &client-defaults
  working_directory: /home/weave/scope
  docker:
    - image: weaveworks/scope-ui-build:master-c0b60a16

workflows:
  version: 2
  test_and_deploy:
    jobs:
#      - lint
      - unit-test
#      - client-build
#      - client-test:
#          requires:
#            - client-build
      - build
      - integration-tests:
          requires:
#            - lint
            - unit-test
            - build
      - deploy:
          requires:
#            - client-test
            - integration-tests

      - deploy-redhat:
          filters:
            branches:
              only: master
          requires:
           - integration-tests

jobs:
  lint:
    <<: *defaults
    steps:
      - checkout
      - run: make BUILD_IN_CONTAINER=false lint

  unit-test:
    <<: *defaults
    parallelism: 1
    steps:
      - checkout
      - run: COVERDIR=./coverage make BUILD_IN_CONTAINER=false CODECGEN_UID=23 tests
      - persist_to_workspace:
          root: .
          paths:
          - coverage

  # Create client/build/index.html
#  client-build:
#    <<: *client-defaults
#    steps:
#      - checkout
#      - restore_cache:
#          name: Restoring Yarn Cache
#          key: yarn-cache-2-{{ checksum "client/yarn.lock" }}
#      - restore_cache:
#          name: Restoring client/node_modules
#          key: node-modules-{{ checksum "client/yarn.lock" }}-{{ checksum ".circleci/config.yml" }}
#      - run: cd client; yarn install
#      - save_cache:
#          name: Saving Yarn Cache
#          key: yarn-cache-2-{{ checksum "client/yarn.lock" }}
#          paths:
#            - "/home/weave/scope/.cache/yarn"
#      - save_cache:
#          name: Saving client/node_modules
#          # include the CI config in the checksum because it will change when the docker image changes
#          key: node-modules-{{ checksum "client/yarn.lock" }}-{{ checksum ".circleci/config.yml" }}
#          paths:
#            - "/home/weave/scope/client/node_modules"
#      - run: |
#          cd client
#          yarn run build
#          yarn run build-external
#          yarn run bundle
#      - persist_to_workspace:
#          root: /home/weave/scope
#          paths:
#          - client/build/
#          - client/build-external/
#          - client/bundle/weave-scope.tgz
#
#
#  client-test:
#    <<: *client-defaults
#    steps:
#      - checkout
#      - restore_cache:
#          name: Restoring Yarn Cache
#          key: yarn-cache-2-{{ checksum "client/yarn.lock" }}
#      - restore_cache:
#          name: Restoring client/node_modules
#          key: node-modules-{{ checksum "client/yarn.lock" }}-{{ checksum ".circleci/config.yml" }}
#      - run: |
#          cd client
#          yarn install
#          yarn run lint
#          yarn test

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: make BUILD_IN_CONTAINER=false SUDO= static all rhel
      - run: cd extras; make BUILD_IN_CONTAINER=false
      - run: make -C tools/runner
      - persist_to_workspace:
          root: .
          paths:
          - scope.tar
          - cloud-agent.tar
          - rhel.tar

  integration-tests:
    machine:
      image: circleci/classic:201709-01
    working_directory: /home/circleci/src/github.com/weaveworks/scope
    environment:
      CIRCLE_ARTIFACTS: /tmp/artifacts
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
      GOPATH: /home/circleci/
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          sudo apt-get update
          sudo apt-get install python-pip jq pv
      - run: mkdir $CIRCLE_ARTIFACTS
      # kick off creation of test VMs
      - run: test -z "$SECRET_PASSWORD" || bin/setup-circleci-secrets "$SECRET_PASSWORD"
      - run: test -z "$SECRET_PASSWORD" || (cd integration; ./gce.sh make_template)
      - run: test -z "$SECRET_PASSWORD" || (cd integration; ./gce.sh setup && eval $(./gce.sh hosts); ./setup.sh)
      - run: make deps; touch tools/runner/runner
      # Run all integration tests
      - run:
          command: test -z "$SECRET_PASSWORD" || (cd integration; eval $(./gce.sh hosts); ./run_all.sh)
          no_output_timeout: 5m
      # Destroy testing VMs:
      - run:
          command: test -z "$SECRET_PASSWORD" || (cd integration; ./gce.sh destroy)
          background: true
      # Code coverage
#      - run: ./tools/cover/gather_coverage.sh ./coverage
#      - run: goveralls -repotoken $COVERALLS_REPO_TOKEN -coverprofile=profile.cov -service=circleci
#      - run: cp coverage.* */*.codecgen.go $CIRCLE_ARTIFACTS
#      - store_artifacts:
#          path: /tmp/artifacts

  deploy:
    working_directory: /go/src/github.com/weaveworks/scope
    docker:
      - image: tufinim/circleci-go:master
    environment:
      IMAGES: scope
      PROJECT_NAME: scope
      GCR_NAME: eu.gcr.io/tufinlight/scope
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: |
          docker load -i scope.tar
      - run:
          name: Authenticate with gcloud
          command:
            echo $GCLOUD_SERVICE_KEY | /scripts/gcloud_auth.sh
      - run:
          name: Upload the docker image to gcr
          command: |
            /scripts/upload_to_gcr.sh weaveworks/scope:latest $GCR_NAME $CIRCLE_BUILD_NUM $CIRCLE_BRANCH

  deploy-redhat:
     working_directory: /go/src/github.com/weaveworks/scope
     docker:
       - image: tufinim/circleci-go:master
     steps:
       - attach_workspace:
           at: .
       - setup_remote_docker
       - run: |
           docker load -i rhel.tar
       - run:
           name: Upload the docker image to redhat
           command: |
             echo ${REDHAT_PASS} | docker login -u unused scan.connect.redhat.com --password-stdin
             docker tag tufin/conntrack:1 scan.connect.redhat.com/ospid-af5d3d3c-1231-45c0-b6cc-b9937ff4d844/conntrack:${CIRCLE_BUILD_NUM}
             docker push scan.connect.redhat.com/ospid-af5d3d3c-1231-45c0-b6cc-b9937ff4d844/conntrack:${CIRCLE_BUILD_NUM}

