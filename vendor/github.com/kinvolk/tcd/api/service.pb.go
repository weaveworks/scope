// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package tcdapi is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	InstallRequest
	InstallResponse
	ConfigureRequest
	ConfigureResponse
*/
package tcdapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// for Install()
type InstallRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *InstallRequest) Reset()                    { *m = InstallRequest{} }
func (m *InstallRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallRequest) ProtoMessage()               {}
func (*InstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InstallResponse struct {
}

func (m *InstallResponse) Reset()                    { *m = InstallResponse{} }
func (m *InstallResponse) String() string            { return proto.CompactTextString(m) }
func (*InstallResponse) ProtoMessage()               {}
func (*InstallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// for ConfigureIngress() and ConfigureEgress()
type ConfigureRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Delay     uint32 `protobuf:"varint,2,opt,name=delay" json:"delay,omitempty"`
	Loss      uint32 `protobuf:"varint,3,opt,name=loss" json:"loss,omitempty"`
	Rate      uint32 `protobuf:"varint,4,opt,name=rate" json:"rate,omitempty"`
}

func (m *ConfigureRequest) Reset()                    { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()               {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ConfigureResponse struct {
}

func (m *ConfigureResponse) Reset()                    { *m = ConfigureResponse{} }
func (m *ConfigureResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigureResponse) ProtoMessage()               {}
func (*ConfigureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*InstallRequest)(nil), "tcdapi.InstallRequest")
	proto.RegisterType((*InstallResponse)(nil), "tcdapi.InstallResponse")
	proto.RegisterType((*ConfigureRequest)(nil), "tcdapi.ConfigureRequest")
	proto.RegisterType((*ConfigureResponse)(nil), "tcdapi.ConfigureResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TcdService service

type TcdServiceClient interface {
	InstallMethod(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	ConfigureIngressMethod(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	ConfigureEgressMethod(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
}

type tcdServiceClient struct {
	cc *grpc.ClientConn
}

func NewTcdServiceClient(cc *grpc.ClientConn) TcdServiceClient {
	return &tcdServiceClient{cc}
}

func (c *tcdServiceClient) InstallMethod(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := grpc.Invoke(ctx, "/tcdapi.TcdService/InstallMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcdServiceClient) ConfigureIngressMethod(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := grpc.Invoke(ctx, "/tcdapi.TcdService/ConfigureIngressMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcdServiceClient) ConfigureEgressMethod(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := grpc.Invoke(ctx, "/tcdapi.TcdService/ConfigureEgressMethod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TcdService service

type TcdServiceServer interface {
	InstallMethod(context.Context, *InstallRequest) (*InstallResponse, error)
	ConfigureIngressMethod(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	ConfigureEgressMethod(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
}

func RegisterTcdServiceServer(s *grpc.Server, srv TcdServiceServer) {
	s.RegisterService(&_TcdService_serviceDesc, srv)
}

func _TcdService_InstallMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcdServiceServer).InstallMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcdapi.TcdService/InstallMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcdServiceServer).InstallMethod(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcdService_ConfigureIngressMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcdServiceServer).ConfigureIngressMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcdapi.TcdService/ConfigureIngressMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcdServiceServer).ConfigureIngressMethod(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcdService_ConfigureEgressMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcdServiceServer).ConfigureEgressMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcdapi.TcdService/ConfigureEgressMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcdServiceServer).ConfigureEgressMethod(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TcdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcdapi.TcdService",
	HandlerType: (*TcdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallMethod",
			Handler:    _TcdService_InstallMethod_Handler,
		},
		{
			MethodName: "ConfigureIngressMethod",
			Handler:    _TcdService_ConfigureIngressMethod_Handler,
		},
		{
			MethodName: "ConfigureEgressMethod",
			Handler:    _TcdService_ConfigureEgressMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x49, 0x4e, 0x49, 0x2c,
	0xc8, 0x54, 0xd2, 0xe3, 0xe2, 0xf3, 0xcc, 0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x09, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1, 0xe2, 0x4c, 0xce, 0xcf, 0x2b, 0x49, 0xcc, 0xcc, 0x4b, 0x2d,
	0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x08, 0x28, 0x09, 0x72, 0xf1, 0xc3, 0xd5, 0x17,
	0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0xe5, 0x71, 0x09, 0x38, 0xe7, 0xe7, 0xa5, 0x65, 0xa6, 0x97,
	0x16, 0xa5, 0x12, 0x65, 0x88, 0x90, 0x08, 0x17, 0x6b, 0x4a, 0x6a, 0x4e, 0x62, 0xa5, 0x04, 0x13,
	0x50, 0x86, 0x37, 0x08, 0xc2, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0xc9, 0x2f, 0x2e, 0x96, 0x60, 0x06,
	0x0b, 0x82, 0xd9, 0x20, 0xb1, 0xa2, 0xc4, 0x92, 0x54, 0x09, 0x16, 0x88, 0x18, 0x88, 0xad, 0x24,
	0xcc, 0x25, 0x88, 0x64, 0x1f, 0xc4, 0x11, 0x46, 0x1f, 0x19, 0xb9, 0xb8, 0x42, 0x92, 0x53, 0x82,
	0x21, 0x9e, 0x14, 0x72, 0xe2, 0xe2, 0x85, 0x3a, 0xd3, 0x37, 0xb5, 0x24, 0x23, 0x3f, 0x45, 0x48,
	0x4c, 0x0f, 0xe2, 0x61, 0x3d, 0x54, 0xdf, 0x4a, 0x89, 0x63, 0x88, 0x43, 0x7d, 0xc5, 0x20, 0xe4,
	0xcf, 0x25, 0x06, 0xb7, 0xc7, 0x33, 0x2f, 0xbd, 0x28, 0xb5, 0xb8, 0x18, 0x6a, 0x98, 0x04, 0x4c,
	0x13, 0xba, 0xbf, 0xa5, 0x24, 0xb1, 0xc8, 0xc0, 0x0d, 0xf4, 0xe3, 0x12, 0x85, 0x0b, 0xbb, 0x52,
	0x6e, 0x5e, 0x12, 0x1b, 0x38, 0x2a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x09, 0x4b,
	0xce, 0xdb, 0x01, 0x00, 0x00,
}
