// Code generated by protoc-gen-go.
// source: github.com/weaveworks/common/httpgrpc/httpgrpc.proto
// DO NOT EDIT!

/*
Package httpgrpc is a generated protocol buffer package.

It is generated from these files:
	github.com/weaveworks/common/httpgrpc/httpgrpc.proto

It has these top-level messages:
	HTTPRequest
	HTTPResponse
	Header
*/
package httpgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HTTPRequest struct {
	Method  string    `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Url     string    `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Headers []*Header `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
	Body    []byte    `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HTTPRequest) Reset()                    { *m = HTTPRequest{} }
func (m *HTTPRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest) ProtoMessage()               {}
func (*HTTPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HTTPRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPRequest) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type HTTPResponse struct {
	Code    int32     `protobuf:"varint,1,opt,name=Code" json:"Code,omitempty"`
	Headers []*Header `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty"`
	Body    []byte    `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HTTPResponse) Reset()                    { *m = HTTPResponse{} }
func (m *HTTPResponse) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponse) ProtoMessage()               {}
func (*HTTPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HTTPResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HTTPResponse) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Header struct {
	Key    string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Header) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Header) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*HTTPRequest)(nil), "httpgrpc.HTTPRequest")
	proto.RegisterType((*HTTPResponse)(nil), "httpgrpc.HTTPResponse")
	proto.RegisterType((*Header)(nil), "httpgrpc.Header")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HTTP service

type HTTPClient interface {
	Handle(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error)
}

type hTTPClient struct {
	cc *grpc.ClientConn
}

func NewHTTPClient(cc *grpc.ClientConn) HTTPClient {
	return &hTTPClient{cc}
}

func (c *hTTPClient) Handle(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error) {
	out := new(HTTPResponse)
	err := grpc.Invoke(ctx, "/httpgrpc.HTTP/Handle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HTTP service

type HTTPServer interface {
	Handle(context.Context, *HTTPRequest) (*HTTPResponse, error)
}

func RegisterHTTPServer(s *grpc.Server, srv HTTPServer) {
	s.RegisterService(&_HTTP_serviceDesc, srv)
}

func _HTTP_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpgrpc.HTTP/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).Handle(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpgrpc.HTTP",
	HandlerType: (*HTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _HTTP_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/weaveworks/common/httpgrpc/httpgrpc.proto",
}

func init() {
	proto.RegisterFile("github.com/weaveworks/common/httpgrpc/httpgrpc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4f, 0x83, 0x40,
	0x10, 0xc5, 0x6d, 0x41, 0xb4, 0xd3, 0x1e, 0x9a, 0x4d, 0x6c, 0x88, 0x27, 0x42, 0x62, 0x24, 0x1e,
	0x20, 0x41, 0x2f, 0x1e, 0xd5, 0x0b, 0x47, 0xb3, 0xe9, 0xc9, 0x1b, 0x7f, 0x26, 0xc5, 0x14, 0x18,
	0xdc, 0x5d, 0x4a, 0xfa, 0xed, 0xcd, 0x2e, 0xb4, 0x12, 0x4f, 0xbd, 0xbd, 0x37, 0xbc, 0xf0, 0x9b,
	0xb7, 0x03, 0x2f, 0xbb, 0x6f, 0x55, 0x76, 0x59, 0x98, 0x53, 0x1d, 0xf5, 0x98, 0x1e, 0xb0, 0x27,
	0xb1, 0x97, 0x51, 0x4e, 0x75, 0x4d, 0x4d, 0x54, 0x2a, 0xd5, 0xee, 0x44, 0x9b, 0x9f, 0x45, 0xd8,
	0x0a, 0x52, 0xc4, 0x6e, 0x4f, 0xde, 0xef, 0x61, 0x99, 0x6c, 0xb7, 0x9f, 0x1c, 0x7f, 0x3a, 0x94,
	0x8a, 0x6d, 0xc0, 0xa9, 0x51, 0x95, 0x54, 0xb8, 0x33, 0x6f, 0x16, 0x2c, 0xf8, 0xe8, 0xd8, 0x1a,
	0xac, 0x4e, 0x54, 0xee, 0xdc, 0x0c, 0xb5, 0x64, 0x4f, 0x70, 0x53, 0x62, 0x5a, 0xa0, 0x90, 0xae,
	0xe5, 0x59, 0xc1, 0x32, 0x5e, 0x87, 0x67, 0x48, 0x62, 0x3e, 0xf0, 0x53, 0x80, 0x31, 0xb0, 0x33,
	0x2a, 0x8e, 0xae, 0xed, 0xcd, 0x82, 0x15, 0x37, 0xda, 0xcf, 0x60, 0x35, 0x80, 0x65, 0x4b, 0x8d,
	0x44, 0x9d, 0xf9, 0xa0, 0x02, 0x0d, 0xf7, 0x9a, 0x1b, 0x3d, 0x65, 0xcc, 0x2f, 0x65, 0x58, 0x13,
	0x46, 0x0c, 0xce, 0x10, 0xd3, 0xfb, 0xef, 0xf1, 0x38, 0x96, 0xd2, 0x52, 0x37, 0x3d, 0xa4, 0x55,
	0x87, 0xc3, 0xaf, 0x17, 0x7c, 0x74, 0xf1, 0x1b, 0xd8, 0x7a, 0x2f, 0xf6, 0x0a, 0x4e, 0x92, 0x36,
	0x45, 0x85, 0xec, 0x6e, 0x02, 0xfd, 0x7b, 0xaa, 0xfb, 0xcd, 0xff, 0xf1, 0x50, 0xc4, 0xbf, 0x7a,
	0x7f, 0xfc, 0x7a, 0xb8, 0xe8, 0x2a, 0x99, 0x63, 0xae, 0xf1, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0x0f, 0x07, 0xc6, 0xc5, 0x01, 0x00, 0x00,
}
