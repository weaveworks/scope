// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x7f\x6c\x5b\xd7\x75\xbe\x8f\x14\x2d\x4a\xae\x2b\x27\x06\x13\x99\x59\x36\x39\xc9\x16\x55\x0b\x1c\x49\x96\x65\x9a\xf9\x51\xc5\x59\x5a\x55\xf3\x2a\xd5\xb5\x1a\xcd\x43\x40\xb3\x34\x6d\xd2\x92\x6d\x5a\xa4\x1d\x3e\xc9\x58\xb5\xa4\x29\x0c\xa1\x40\xe5\x26\xc3\x84\xc0\xdb\x44\x59\xa9\xd5\x2e\x1b\xbc\xad\x9b\x3d\x24\x98\x34\xd7\x18\x04\x6c\x7f\x78\x59\x56\x08\x81\x07\x08\x43\x50\x68\x59\xb1\x69\x99\xe1\x69\x81\x11\x0e\xbc\xe7\x7b\x7c\xef\x9d\x77\xdf\x23\x65\xbb\xed\x3f\x22\x90\x5c\x9f\xef\xdd\x73\xcf\xbd\xe7\x9e\x7b\xee\x77\xef\x7b\xfa\xc6\x0b\x7b\xbf\xe0\xd3\x34\x61\xfc\x34\xf1\xbf\xc2\x94\xcc\xdf\x7c\xaf\xf9\xef\x2e\xfc\xff\x51\xa1\x89\xb9\x07\x08\x7b\x4d\x08\xf1\x59\x21\xc4\x68\xfd\x4a\xb1\x24\xeb\xf1\x8c\xc4\x47\xc3\xab\x52\x9e\x9b\xa6\x7a\xb5\x3e\x21\x56\x8a\xc5\xe2\xdc\x05\xc8\x7e\x21\x56\x8b\xc5\x62\x23\x33\x7a\xb9\xc6\x6c\xd7\x57\x92\x81\xff\x3e\x4a\xfd\xc1\x3e\x66\xb7\x5b\xda\xb9\x8c\x76\x46\xc3\x5d\x0e\xbb\xdd\x0a\x3b\xaf\xc9\x31\x0b\x11\x12\x9f\x95\x4f\xf4\x0d\x84\x57\xa3\xe7\x17\x42\x1c\xa9\x15\xa2\x49\x08\xf1\x32\xca\xfe\xda\x80\xc6\xf5\xbb\x3c\xec\xce\xd5\x92\x1c\xaa\xfd\x94\xc6\x75\x12\xb2\x76\x9b\xe4\x02\xc6\xe5\xc3\xb8\x5a\x5a\xc9\xbf\x59\xd4\xf3\x7f\x45\xf6\xa3\xdf\x7f\x4b\xb6\xa7\x0f\x07\x25\xfe\xd2\xfd\x37\xc9\x8f\x75\xd0\x7b\x73\xb9\x48\xe5\x12\xca\x45\x94\xd7\x51\x2e\xa0\x9c\x47\x79\x05\xe5\x25\x94\xb3\x28\xa7\x50\x4e\xa2\x9c\x40\x79\x16\xe5\x18\xca\x7c\xb9\xdf\x3e\xd9\xef\x14\xe1\xe1\x0c\xf5\xff\xe4\x66\xcc\x13\xd5\xd3\x87\x1b\x31\xbe\x66\xaa\xd7\x32\x06\xbc\x09\x78\x13\x70\xb2\xa3\x67\x9a\x09\xaf\x27\xfb\xfa\xa9\x56\x92\x0f\x50\xbf\xf4\x5c\x84\xfc\x97\xa7\x68\x1d\x1d\x47\xff\x7b\xa8\xff\x7a\xbe\x9b\x9e\x0f\xf7\xa1\x7d\x8c\x77\xfc\x92\xcd\x0f\xf1\xe1\x9c\x7c\x9e\x68\xb9\x01\x39\x0f\x99\xfc\x98\x1e\x3e\x23\xe5\xc1\x96\x0f\x21\xff\x2e\xe4\x9f\xa0\x7e\x06\xf5\x17\xf1\x7c\x0c\xcf\x97\xf1\xfc\x90\x94\x8f\xf8\x28\x7e\xe2\xfa\x41\x29\xf7\x7e\x97\xe6\x2d\xae\xa7\xa8\xcc\x0e\x51\x3d\x3f\xd5\xeb\x7d\x1d\xf3\x1a\xc5\xfc\xb5\xd0\xfc\x25\xb5\xb8\xf4\x77\x48\x3b\x83\x38\xfa\x2e\xc5\xb7\xa6\x49\x3c\x20\xfe\x9c\xe2\x02\xf1\x38\x18\xde\x27\xf5\x1a\xbe\x45\xf2\x5c\x81\xca\x5a\x4d\x88\x7d\xc5\x62\xd1\x98\xbf\xb9\x84\x19\xb7\xa5\xa5\x99\x2e\x90\xde\x60\x98\xc6\x11\x10\x7f\x84\x71\x0e\x14\xa9\xbc\x4d\xcf\x5b\xf6\xa3\xbc\x85\x7e\xa6\xf0\x7c\x15\x71\x40\xf3\x6e\xb4\xdf\xb0\xc5\xd9\x8f\x01\xf4\xa3\xc6\x62\x5f\x3f\xd9\x54\x51\xef\xb6\x52\xaf\xb9\xa2\xde\x7e\xcb\xb8\x4d\xbd\xd6\x8a\x7a\xb7\x94\x7a\x14\x87\x0d\x0f\x38\xeb\xa7\x50\x3f\xa8\xf0\xaf\x7e\x92\xe2\x56\xbf\x40\xfe\x52\xd9\x5b\x55\x8c\x2f\x3e\x03\xff\xf7\x50\x9e\x88\x5f\xa0\x79\x48\x44\x3b\x28\xfe\xa6\x8d\xf9\x88\x90\x5c\xb8\x85\x79\x8c\x52\xfd\xb7\x68\x5e\x12\x07\x9e\x96\x65\xa8\x66\xd0\x16\x77\x2f\xa3\x0c\xf9\x29\x2e\x5f\xf4\x09\x51\x2c\x0a\x11\xf2\x1d\x26\x59\x83\xac\x51\x5c\x1b\xf9\x6b\x34\x9c\x62\xf9\x39\x6f\xcb\x07\xd6\x71\x65\x30\xae\xcd\x18\xd7\x66\x96\x4f\x5b\xd9\xfe\x91\x52\xe4\xd7\x80\xd8\x27\xcb\x90\xf6\xb8\xcc\x8f\x21\xed\x19\xe9\x9f\xd2\x3a\x08\xc8\xe7\xb4\xee\x8d\xfe\x24\xc2\xfb\xd1\x1f\xf2\x5f\xc3\x17\xdc\xe3\xd0\x7b\xbe\x06\x5c\xe7\x6b\xbf\x62\xbe\x8e\x08\xf8\x15\x65\x69\x1c\x1f\x17\x8b\x45\x63\x1c\x2f\x6d\x6e\x2b\xf7\x53\x93\xfd\x9b\xc7\x7a\x6b\x65\xfd\xa7\x79\xd6\x0b\x94\x3f\x55\xf1\x66\x5d\x0f\xbc\xff\xf1\x02\xe2\x24\x7c\x03\xed\x3f\x66\x6b\x7f\x30\x4c\x71\xd2\xb0\xc1\xd9\xee\x2d\xcf\x3c\x61\xc4\xd7\x87\x68\x77\x2b\xeb\x37\xf2\x40\xa1\xc9\xb5\xdf\xab\x9e\xfd\x46\xbc\x86\x97\xd0\xfe\x26\xd6\xef\xc3\xd4\xee\xd7\x9c\xed\x1e\xf6\xec\xf7\x61\xf4\xfb\x27\x68\x97\x36\xe0\x78\x61\x3f\xec\x2d\x3a\xf8\x45\x35\x71\x59\x89\xd7\xfc\xc2\xf8\x54\x23\xe7\x53\x7d\x6c\xbd\x76\x3b\xec\xf6\x79\xf1\x1a\xc4\x49\x68\x03\x85\x72\x35\x7a\xa5\x75\xaa\x1f\x16\x8e\xfa\x5e\xbc\xcd\xe4\x4f\x1f\xd3\x38\xca\xfc\x69\x85\xe4\x69\x3e\x8e\xa6\xa2\xbd\x5e\x3f\xf1\x27\xed\x23\xe2\x4f\x27\xc1\x9f\xb6\x2d\x0b\xbb\x1e\xf8\x52\x18\xfb\x6d\x18\x7c\x09\xeb\x71\x34\x0c\xfe\x10\x06\x7f\x08\x83\x6f\x84\xc1\x97\xc2\xe0\x4b\x61\xf0\xa5\x30\xf8\x52\x18\x7c\x89\xe5\xc3\x72\xbe\xf4\x83\x3f\x45\x07\xb0\x7f\x1e\x04\x2f\x22\xfe\xa4\x67\xc1\x9b\xa2\x19\xdb\xfe\xaa\x67\x69\x7f\xd4\x73\xe0\x49\x3d\xb0\x13\x05\xdf\xca\xb6\xe2\x79\x04\xcf\xd1\xaf\x28\xf8\x55\x16\xf9\x2c\xd7\x8d\xe7\x18\x47\x14\xfc\x2a\x0b\xde\x14\x9d\xb5\x8d\x3b\x9e\x03\x5f\xea\xf9\x47\xc8\xe0\x4b\x3d\xe4\xb7\x74\x0e\x7c\xa9\xe7\x7d\xc8\xe0\x4b\x3d\x3f\x46\x7d\xf0\xa5\x9e\x05\x3c\x07\x5f\xea\x59\xc4\x73\xf0\xa0\x1a\xf0\xa5\x53\xb4\x0f\xf5\xee\xc7\x3c\xf5\x80\xb7\xe5\x88\x47\xc5\x4f\x81\x5f\x05\xc0\x9b\x5e\x40\xbd\x03\xc6\x7c\x45\x50\xd2\x7e\xd9\xef\xfb\xbe\x28\x85\xee\xdc\x45\xc4\x5f\xad\x10\x57\x8a\xc5\x62\x43\x27\xe2\xd2\x92\x3f\x5a\x2d\xfb\x94\x63\x3f\x28\xa0\xdd\x07\x29\x9e\xf4\x42\x2b\x64\xb4\x63\x89\xef\x26\xb6\x7e\x07\x94\xfb\xd9\x1b\x34\x8e\x20\xf6\x0b\x94\xfd\xc1\xd7\x59\x9c\xc2\x0e\xe2\x7c\x34\xbc\x82\x72\x19\xf9\xec\x13\x94\xab\xc0\x97\x90\xcf\xb0\x7f\x9c\xa4\x79\xe5\x3c\xa7\xd4\xaf\xcd\x2e\xe3\x0f\xda\xf6\x41\x77\xfd\x46\xa6\xdf\xb4\x06\x7d\xab\xde\xca\x1a\xed\x06\x99\xfe\xb2\x52\xbf\x32\x2f\xfc\xe4\x0e\x79\xe1\xea\x1a\x79\xe1\x52\x55\x3c\x63\xc9\x95\x67\x28\x79\xef\xf7\x11\x17\x6f\x52\x1e\xd1\xbf\x87\xf8\x38\x4a\xf9\x64\x2e\x4e\xfa\xbd\xe7\xa8\xd4\x2f\x22\x6e\x46\x90\x4f\x66\x71\x7e\x1c\xa7\x3c\x93\x9e\x41\x1c\xf5\xe4\xc1\x2b\x57\xc1\x2b\x47\x18\xef\x3c\x43\x3c\x52\x7b\x96\xfa\xf9\x7b\xb0\x53\xce\xbf\x4f\x11\xfe\x1c\xc9\x26\x7f\x24\xff\xcc\x6d\xe3\xf8\x4e\x29\x8f\xf6\x04\x91\x8f\x36\x23\xef\x35\xb2\x3c\xdf\x65\x5b\xdf\x7a\xa1\xcf\xb6\xce\xad\xfe\x8a\x28\xf8\x66\x7f\x1d\x6d\x60\x86\x5f\x8e\x68\x58\x77\x28\x1b\x25\x1d\x30\x79\xda\xc3\xdb\x68\x23\xea\xaf\xdd\x6a\x1b\x67\x25\xbd\x97\xb6\xd1\x04\xbe\xbc\x81\x9e\x27\x8e\xd2\xbc\x18\xeb\x3b\x31\xfe\x18\xfa\x4f\xe3\xbd\xa1\x51\xff\x06\xc3\xcd\xc0\x1b\x19\xde\x02\x7c\x33\xd6\xf5\x13\x8e\x7d\x9b\xe7\x9b\x56\x65\xbe\xc1\xf8\x2d\x7a\x03\x55\xe8\xad\x85\xdf\x04\x25\xcf\x88\xb0\x79\xa3\x3c\xaf\x1f\xa1\xbc\xae\xa7\x32\x8e\x7e\x2c\x7a\xf1\x01\xdc\x77\x84\xea\x1e\x26\x7d\xc4\x73\xbf\xf6\x90\xdc\xe7\xe7\x4e\xaa\xe7\xa5\x74\x2e\xa8\x95\xf5\x1e\x90\xed\xf0\x38\x1a\xc4\xfe\x56\xed\xbd\x4e\x08\x7c\x51\xc7\xf3\x90\xb6\x49\xda\xbf\xf7\xed\x8e\x53\xbb\xcc\xcf\xba\x46\xfb\xf6\xdc\xab\x24\xab\xf2\xc4\x25\x45\x5e\x4a\x17\xa8\x3f\xfd\xda\x47\x45\x9f\x8d\xa7\x5f\x42\x3c\xad\xa0\xdf\x4b\x28\x6f\x17\xad\xe3\x49\x60\x9f\xd1\xcf\x35\x56\x6d\xdf\x96\xa7\xce\x35\x55\xd4\x5b\x51\xea\x35\x57\xd4\x5b\x52\xe5\xe1\x73\xad\x15\xf5\x6e\x2b\xf5\x90\xbf\x1b\x9d\xf5\xbb\xac\xf9\xfb\x55\x73\xfe\x48\xcf\xc8\xdf\x5d\xae\xf9\x7b\x59\x79\xae\x87\xff\x7b\x26\x91\x5f\x57\x90\x5f\xcf\x23\xff\x62\x3e\x5a\x88\xa7\xa5\x71\x9e\x1b\x0c\x4f\x53\xfd\xb7\x68\x5e\x12\x07\x66\x28\x1f\xd7\xfc\x8d\x2c\x9d\xe7\xfa\xbf\x96\xb8\x79\xae\xff\x21\xc9\xe5\xfc\xfb\x17\xa4\xe7\xb8\xf7\xa4\xf5\x13\x10\xed\x82\xc7\xf3\xa4\x67\x3c\x13\x7f\xbc\x0c\x1e\x3f\x3a\x02\x3e\x3d\x02\x7e\x36\x72\xc9\x91\xaf\x8d\xb8\x91\x7c\xc2\x6f\xf7\xef\x6b\xb2\x0f\xa5\xbc\x42\xfe\xd5\x2f\x44\x94\xe3\x1c\x8d\x9a\xf7\xc5\x9a\x8c\x5b\xda\x1f\xe2\x85\x1f\x22\x8e\xf7\x43\x9e\x84\x9c\x82\x7c\x1e\xf2\x10\xfc\x3c\xc5\xf2\x2f\xf6\xc7\xc2\x34\xc3\x87\xa1\x3f\x03\xfd\x1c\x95\x23\x79\x94\x67\x90\xb7\x8d\xf3\x04\x78\x7e\xc1\xe0\xa9\xb4\x6f\xcf\xcd\xc0\x0f\x35\x14\x67\xc6\xfe\xd4\xe8\xb3\xfb\xf7\x72\x80\xee\xe9\x4b\xfe\xd8\x5a\xe5\x7c\xf8\xa5\xef\x4e\x93\xdd\xbb\xce\x1f\xc7\x8a\xf5\xca\xfd\x78\xf2\xce\x78\xe9\xb9\x3e\x65\x7f\x54\xbc\xb4\x4b\xc5\xef\x3c\xf4\x39\x2f\x9d\x5c\x83\x7e\x45\x5e\xea\x61\xb7\x2a\x5e\x5a\x45\x5e\x53\xf2\xd2\x2a\xf2\x9a\x92\x97\x7a\xe4\xb5\xa5\xaa\xf2\xda\x1a\x79\x69\xa1\xcb\x76\x7e\xd4\xdf\x42\x7c\xe0\x7c\xd6\x1b\x12\x68\x17\xf1\x12\xa5\xf5\xa1\xcf\x80\x8f\x1a\xe7\xc4\x69\xc4\x4f\x0b\xce\x99\xb8\x17\x1a\x0c\xbf\x47\xeb\x6e\x0a\x7c\xb4\x9e\xce\x9d\xa1\xc0\x56\x6a\xbf\x83\xda\x0f\xd5\x3c\xc8\xf2\x5e\x88\xe5\xbd\x2d\x2e\x79\x6f\x83\xcc\x7b\xd6\xf5\x75\xc9\x73\x7d\xd5\x3b\xf6\x7b\xb7\xfa\x94\x1f\x6b\x58\x7e\xc4\x79\x7b\x04\xe7\xf1\x91\x49\x47\x7e\x9c\xfc\x99\xe6\xc7\xf3\xb6\xfc\xa8\x63\xbd\xeb\xd3\xc8\x53\x2d\xf6\xfb\x0b\x23\x9f\xe9\xd3\xb8\x2f\x69\xb1\xdf\x77\xa4\x0b\xd7\x59\x9e\x3c\x0b\xfc\x3d\x86\x8f\xc3\xfe\xfb\xb0\xff\x6d\xe4\xcd\x09\x94\x6f\xc0\xde\x2c\xcb\x9f\x53\x77\x9c\x3f\x07\x2c\xf9\x33\x20\x7e\x44\xfa\xe0\xaf\x9c\xaf\x9a\xf7\x66\xad\x65\x59\xae\x93\x20\xe2\x37\xbd\x46\x1e\x5b\xbe\xd7\x7a\x82\xf4\xc1\x5b\xfb\xb5\x16\x19\x47\xa3\x47\x89\xff\xcf\xe1\xbd\xcd\x65\xd8\x19\x1d\x27\x3f\x27\xc6\xc9\x4f\xc6\x39\x73\x0e\xef\x8b\x54\xeb\x72\x41\x79\x1e\x36\xd6\xf3\x82\xeb\x7a\x7e\x5f\xb1\x9e\x47\xc7\x29\x9e\x06\xc7\xa7\x1c\x71\x1e\x59\x13\xaf\x6d\x20\xbe\x9e\x82\xff\xbe\xd7\xcc\xce\x09\xb0\x13\xbe\x5b\x3b\x5f\xf5\xe6\xcf\x1e\x7e\x9b\x52\xee\x7f\xe8\x0f\xeb\x77\xbf\xb6\xcc\xf8\xf4\x44\x05\x3e\x1d\xb1\xf3\x69\xe3\x3d\x99\x47\x7f\x26\xbc\xde\x93\x79\xe8\x29\xf9\xb4\x71\x1f\xe2\xa1\xa7\xe4\xd3\xc6\x7d\x88\x87\x9e\x92\x4f\x1b\xf7\x21\x5b\x9d\xf5\x23\xd6\x7d\xe7\x75\x73\x3e\xed\x71\x1a\x59\x23\x9f\x86\xff\x71\xaf\x69\xf2\xe9\x19\xc6\xa7\x67\x19\x9f\xfe\x01\xe3\xd3\x6f\x83\x4f\xd3\x82\x75\xf2\x69\x3a\x10\x9b\xfb\x0a\xc5\x9f\xb1\xaf\xf4\x6b\x57\xa9\xbf\x96\xf8\x2d\xc5\x55\x40\xfc\xd5\x3d\x89\xc3\x7e\x6d\x86\xf1\x30\xe3\xbe\x73\xe2\xce\x78\x98\x71\xcf\xc6\xfa\xa3\xe2\x61\x11\xaf\x7b\x3a\x85\x3e\xe7\x61\x13\x6b\xd0\xaf\xfa\x7e\x50\x61\x77\x4d\xf7\x83\x1e\x76\x3d\xef\x07\x3d\xf4\x3c\xef\x07\x15\xeb\x61\xa9\xaa\xf5\xb0\x46\x1e\x36\x83\xb8\x30\xbe\x8f\xb8\x60\xbc\x0f\x98\xc5\xfe\x8d\x38\x69\xc1\x7e\x5f\x00\xff\xc2\x7b\x8f\xf4\x14\xe2\xa6\x9e\xf6\xfb\x34\xde\x23\x0f\x1e\xb8\x4a\xeb\xe5\x22\xf8\xd7\xc8\x35\xca\x8f\xbb\xa8\x3f\xbd\x5f\xa4\x32\x54\xfb\x3b\xd4\x4f\xdc\x8f\xf7\x3e\x6e\xe0\x03\xb2\x7c\x11\xb7\x66\x21\x41\x2f\xf2\x5e\x0c\x40\x0e\xd0\xc5\x7f\x7f\x4d\x40\x96\x7c\xfd\x35\xca\xe5\x67\xb9\xa7\x7b\x9e\xee\xb5\xfa\x7d\xa3\x54\xbf\xe2\xfd\xdc\xe9\xb2\x7f\x03\x96\xfb\x2a\x7e\x0f\x3f\x3a\xde\x55\xde\x9f\xfc\x72\xbd\x74\xc3\x4f\xc4\x07\x8c\xf6\x13\xe1\xbd\x6c\x1f\xc3\x7b\x1d\x83\x5f\x4d\x53\x3e\x49\xe0\x3d\x4f\x7c\xfa\x5d\xc8\x87\x90\x97\xc8\xbf\x37\x70\x5f\x39\x88\xf7\x3d\xe9\xe9\xab\x0c\x3f\x0a\xfd\x6b\xd0\x1f\xc2\x3a\xce\xa0\xcc\x39\x78\x63\x9f\xe2\x1e\x34\x5d\x38\x8a\xf6\x71\xfe\xbd\x40\xfd\x88\xcf\x1c\x44\xde\x23\x42\x34\x47\xd7\xb2\xe5\xf7\x2c\x2f\xa3\x0c\x05\xee\xa7\xe7\xbf\x2a\xd8\xbc\x35\x10\x1e\xe2\xf8\x67\x08\xb7\xf0\xb4\x88\x07\x4f\x33\xce\x21\xfc\xbc\x5b\xa9\xdf\x09\xbc\xef\x4a\x44\xdf\x60\x7e\x9b\x64\xbc\xf3\x4d\xf0\x4e\xc3\x7f\xe7\x1d\x7c\x63\xc2\x93\xef\xdf\xfc\x94\xd7\x9f\xf2\xac\xff\x9f\x9f\xfe\x7c\xe3\x6d\x8a\xc5\xdb\x0c\x8b\xb7\x59\x97\x78\xfb\x81\x4b\xbc\xbd\x7d\x57\xf1\x76\xb7\xf3\x1e\x10\x7f\xff\x73\xf5\x9f\x3e\x6d\xe4\x4b\x9c\x3b\xa2\xf8\xce\xcd\x78\x4f\x3b\x8d\x7c\x79\x01\xe7\x23\xbc\x7f\x35\xce\x49\xce\xf5\x3c\xe6\xb2\x9e\x5f\x61\xeb\xf9\x9b\xf0\xeb\x59\x94\xdf\xfe\x99\xf9\x77\x40\xfa\xf2\x9f\xc9\x0f\xe5\xef\x10\x0d\x7e\x00\xbf\x6d\xb5\x7f\x3f\x60\xbc\xff\xe7\xe7\xa0\x50\x1d\xbd\xe8\xb1\xae\x07\xd5\xf7\x0a\xce\x73\x50\x54\x96\xe6\x39\x28\x42\xe7\x20\x63\x1e\xd1\xfe\xe0\x38\xbe\x37\x19\xbf\x09\xbe\x52\x79\xff\xbd\xb9\x86\x7d\xbb\x16\xef\xe3\x2b\x7d\xf7\x35\x3a\x0e\x7e\x38\x8e\xef\x37\xaa\x38\x87\xa9\x79\x87\xb1\x9f\x2f\xbb\xee\xe7\x2a\xfe\x3e\x3a\x3e\x01\x3f\xf4\x55\x9d\xaf\xaa\x7b\x6f\x81\x76\xc3\x77\xdb\xee\x97\xee\xf8\xdc\x25\xe3\x3a\x88\xf7\x4b\x0e\xde\xdb\x07\xde\xfb\xef\x45\x9f\x2d\x0f\xe0\x3b\x51\xdc\x37\xf1\x7d\x9f\xdf\x4f\x26\x70\x7e\x35\xcf\x6b\xde\xdf\x79\xc4\xc1\x8f\x12\x2d\x58\x9f\xf8\x3e\x24\x11\xa6\xef\x20\xcc\xf7\x7b\x33\x88\x87\xca\xe7\xb9\x2b\x1e\xe7\x39\x15\x2f\x7c\xd7\xfa\x9d\x14\xe3\x85\xe6\x77\x58\xe0\x67\x85\x9b\x6c\x9f\xbb\xea\xc8\x1f\xb3\x8a\xfc\x11\xc7\x7d\x74\x48\x5b\xc0\xbe\xf8\xae\xd2\x9f\x21\xed\x1a\xec\x90\x3d\xf3\x1e\xed\xef\x80\x5f\x65\xf8\xdf\x92\x7d\x4b\x7e\x2a\xc5\x93\xf1\xfd\x20\xcf\x4f\xc6\xfb\x93\x80\xf8\xd6\x3d\x8e\x9b\x3f\x95\xe7\xa5\x7b\x17\x37\x77\xf6\xdd\x90\x19\x4f\x37\x10\x47\xc6\x39\xec\x43\x97\x78\xaa\x7c\x2e\x52\xdf\xf3\x54\x7f\x2e\xba\xbe\x46\x7d\x7e\x1e\xbc\xe2\xa1\x6f\xc4\x73\x6d\x9d\xf3\x1c\x38\xef\x71\xde\x31\xe3\x7a\xd1\x25\xae\x3f\xa8\x2a\xae\xcd\x7b\x4a\x9a\x8f\x7e\x1f\xde\x7f\x63\x3c\x95\xcf\x15\x75\x88\x4b\x9a\x67\x7d\x86\xe6\xb9\xbf\x86\x88\xb1\x1b\x3f\xa6\x2c\x60\x39\x6f\x04\x9e\x2c\x8f\x8f\xe2\x0f\x3c\xe3\x22\xe2\x6c\x64\xa0\x1c\x5f\x3e\x19\x0f\xe0\xb3\x47\x0f\x31\x9e\x62\xbf\x87\x35\x79\x43\x1e\x32\xee\x51\x5b\xce\x80\x6f\x90\xff\x4c\xfe\xf1\x01\xe4\x57\x58\x3c\x56\xe6\x1d\x29\x65\xde\xc8\x23\x6f\x3c\x87\xbc\x71\xc6\x25\x6f\x3c\x83\x79\x1c\x63\xf9\x21\x0a\xfc\x15\x86\xef\x72\xe4\x8d\x3e\x8f\xbc\x31\x87\xbf\x9b\x70\xf2\xc6\xed\xb2\x7e\x2f\xbe\x37\x09\x69\xf4\xdd\x44\xef\xf3\x90\xfd\x2d\xb0\xbf\xc8\xec\x3f\x0e\xfc\x03\x86\x3f\x76\x47\xf9\xcc\xe4\x5b\x3f\x25\x7d\xc7\xf7\xa0\xc4\xbb\x8c\xef\x85\x13\xf5\xe0\x39\xe5\xef\x43\x97\x1d\xfb\xf2\x4d\xcf\x7d\xb9\x5e\xca\xf1\xf2\xbe\x4c\x44\x8a\xf3\x33\xeb\x77\x1f\xcb\xf7\xe4\xbb\x56\xe7\x77\xac\xd5\xf1\xc0\xc7\x94\xfd\x73\x3b\x4f\x71\xfe\x69\xae\x2b\x5a\xe7\xce\x73\xc1\x7c\x79\x1d\xd5\x58\xf6\x71\x73\x5d\xd9\xef\xcb\x8c\xfb\x31\xfe\x7d\xa8\xf9\x3d\x35\xbe\x83\x04\x6f\x35\xee\x7b\x55\x79\xd5\x8d\xa7\x5f\xb9\x83\x73\x10\xf7\x7f\x8d\xe5\x3f\x51\x23\xd6\x7f\xf8\xad\xfb\x45\xfd\xd3\xb0\x6e\xe4\xb2\x59\xf7\x4b\xf9\xb7\xee\x17\xf5\x4f\x43\xde\x92\x7c\x66\xdd\x2f\xe5\x5f\xc9\x2f\xcd\xeb\x7e\x71\xfc\x8c\x75\xb4\x9e\x77\xed\x3f\x6d\x7d\x3f\x52\xfe\x8c\x78\x39\x8b\x7f\xaf\xff\xe8\xf7\xc5\xbe\xbd\xe2\xd3\x62\xb1\xb8\x19\xb2\x36\xb2\x4f\x04\xcf\x6c\xd4\x1e\xb2\xe6\x63\x21\x44\x1e\x65\x09\x7b\x02\xff\x5e\x0c\x9a\x58\x97\xa2\x1e\xfe\xa4\x46\xa4\x2c\xf5\xf0\x59\x83\x98\xaf\x37\xb1\x33\x46\x67\x36\x99\xd8\x04\xa0\x4c\x9d\x89\x81\xd2\x8a\x05\x8b\x8d\x2b\xf8\xf7\x58\x85\x49\xfd\x9c\x5c\x0b\x01\xd1\xbc\xc1\x8e\xff\xc8\x4f\x78\xb0\xd6\x8e\x0f\x00\x9f\x67\x78\x18\x78\x97\xdf\x8e\xff\xb1\x8f\xf0\x14\xab\x3f\x06\xbc\x29\x68\xc7\x7b\x80\x77\xb3\xfe\x6c\x45\x3f\xf3\xac\xfe\xff\xc1\xee\x59\x86\x7f\x00\x7c\x92\xf5\xe7\x20\xda\xbf\xc2\xea\xb7\x03\x5f\x60\x78\x9f\xd4\xaf\x13\xdd\xac\xff\x7f\xe0\x23\x7c\x8c\xe1\x79\xe0\x8d\xac\x9d\x3d\xc0\xbb\x19\xbe\xbb\x86\xf0\x01\x86\xff\x36\xea\xcf\xb2\xfe\xbf\x23\xe5\x8d\x62\x99\xe1\xf7\x03\xcf\x07\xec\x78\xc6\x47\xf8\x00\x8b\x83\x28\xf0\x59\x56\x3f\x82\x76\x16\x59\x7f\x7c\xc0\x83\x75\x76\x7c\x06\xf8\xac\x1d\x16\xff\x81\xf6\x79\x52\x39\x0b\x3c\xc5\xf0\x6d\xd2\x0f\x9b\xc4\x00\xcb\xcd\x1a\xf0\xc6\x7a\x3b\xfe\x6f\x7e\xc2\x53\x0c\xef\x06\xbe\xc8\xda\xaf\x07\x9e\x61\xed\xdf\x87\xf6\x23\xac\x9d\xbf\x44\xfd\x05\x36\xbf\x9f\xf8\x08\x5f\x65\x78\x1d\xda\x59\x60\xfe\xf9\x6f\xb4\x33\xbb\xd1\x8e\xbf\x07\x7c\x92\xe1\x7f\xe2\xd2\xff\x3f\x34\xfa\xcf\xf0\xcf\x01\xe7\xeb\xfc\x43\xf4\x73\x99\xe1\xb4\x3e\x1b\xc4\x24\xf3\x43\xca\x47\x78\x13\x1b\x57\x5b\x0d\xe1\x7c\xfd\xb6\xa2\x1d\xbe\x5e\x3e\x46\x3b\xd7\x19\xfe\x1d\xe0\x4b\x0c\x7f\x04\xed\xac\xb2\x7e\xee\x43\xfd\x3e\x76\x2e\xff\x75\xe0\x07\x19\xfe\x0f\xb2\x9d\xfb\xca\x79\xcf\xf8\x7d\x24\xf1\x2d\x0e\xbf\x09\x79\x8f\xe1\x77\x82\x12\x0f\xb8\xe0\xb5\x2e\x78\x9d\x0b\xbe\xd1\x05\xdf\xe4\x82\x37\xb8\xe0\xf7\xb9\xe0\x5b\x1c\x58\x8d\xbc\xef\xf8\x65\x07\xfe\x5b\xf2\xde\xf6\x57\x1c\xb8\x2e\xef\x93\x1f\x74\xe0\xf3\xb2\x9d\x46\x07\xfe\xac\x6c\xe7\x97\x1c\xf8\x0b\x72\xdf\x79\xc8\x81\x0f\xc9\xfa\xce\xfe\xff\xab\xc4\x9d\x7e\xf8\x33\x89\x3b\xfd\xf6\x2f\xb2\x7d\xe7\x7c\x1d\x93\xb8\x73\x5e\xbe\x26\xdb\x71\xfa\xa7\x56\xd6\x77\xfa\xf9\x1d\x89\x3b\xe7\xfd\xab\x12\x77\xce\x6f\x52\xfa\x2d\xe4\xc0\xdf\x96\x7e\x7b\xc0\x81\x37\xcb\xfe\x3c\xec\xc0\xbf\x23\xdb\xd9\xea\xc0\x7f\x2c\xdb\x09\x3b\xf0\x6e\x94\xa5\x70\x7e\xae\x94\xaf\x99\x9c\x61\xf2\x25\x8b\xdc\x57\x1a\xcb\x06\x53\xfe\x8a\x10\x62\x36\x68\x7f\x6e\x6d\x7f\x0f\x6b\x7f\x0f\x6b\xbf\x24\x4f\xb1\xf6\x27\xfc\x76\x59\x04\xed\xf6\x22\x16\x79\x1f\xb3\x57\xaa\x7f\x9d\xc9\xcd\x9a\x5d\x5e\xf5\xdb\xdb\x1b\x08\x98\xf2\x97\x4b\xfb\x4b\xc0\xfe\x7c\x99\xd9\x6b\xac\xb3\xcb\x93\xf5\xa6\xdc\x6b\xf4\xd9\x62\xaf\x8b\xd9\x9f\x65\xf2\x58\x9d\xdd\x7e\x63\xbd\xdd\x7e\x77\xbd\xdd\x5e\x7e\xa3\xbd\xfe\xe2\x67\xec\xf6\x07\x98\xfd\x05\x66\xaf\xc9\x67\x97\xf3\x35\xf6\xf6\x2e\x05\xed\x72\x77\x9d\xbd\x7d\xab\xbf\x9f\x2f\x8d\xdf\x22\xff\x06\xce\xd4\x56\xf9\x20\x93\xbb\x35\x7b\xfb\x46\x26\x28\x0d\xb3\xb3\xb4\x2f\x58\xe4\x5d\xd0\x31\xe4\x88\x65\x7c\x25\x79\x77\x29\x3f\x58\xe4\x68\xc9\x9f\x16\xf9\x29\x21\xf0\xd7\xd9\x24\x3f\x5d\xf2\xbf\x45\x7e\x46\x08\xf1\xae\x45\x96\x7f\x09\xbb\x3d\x97\xcc\xe7\xc4\xe0\x70\x32\x97\x19\x3e\xf1\xf5\x64\x2c\x96\x3e\x9e\xcc\xc5\x12\xd9\xc1\x58\x3c\x91\x48\x66\x72\x62\xfb\x70\x72\xa8\xfc\xf8\x49\xfe\xf4\x58\x3c\x93\x7d\xf2\xf0\xa1\xf4\xf1\x6c\x2e\x3e\x34\x14\x1b\x4e\xda\xda\xca\x25\x32\xb1\xd3\x9d\xb1\xc4\x89\xe3\xc7\x93\x89\x9c\x18\x54\xc3\x76\x0b\xaa\x87\xca\x27\xdc\x4e\x87\xda\x4e\x87\x97\x9d\x0e\x57\x3b\xe6\x13\x39\xc4\x5c\x22\x93\x1b\x8e\x27\x92\xc3\xb1\x6c\x2e\x9e\x3b\x95\xe5\x03\xcf\xa4\x0f\x65\x45\xec\x74\x72\x38\x9b\x3e\x71\xdc\xda\xb5\xc3\x87\x62\xa8\x53\xee\x96\x05\xb2\x77\x89\x3f\x70\xa0\xd6\x81\x65\x93\x39\xd9\x97\x24\xef\xba\xf9\xc0\x5a\x3d\x31\x74\x22\xeb\xa8\x4a\x60\x6c\x28\x9d\x48\x1e\xc7\xd3\xed\xc9\x54\xec\xf0\x70\xfc\x58\x52\x6c\xcf\xe6\x86\x73\xf1\xaf\x8b\xed\x59\xfd\x58\xa9\xdc\xbb\x67\x4f\x67\x6c\x77\xa9\x68\x8b\xb5\xcb\xb2\x23\xd6\x26\xcb\x1d\x28\xdb\x50\x76\xc6\x22\x04\x47\x50\x3b\x42\x68\x5b\x04\x5a\x78\xdc\x86\xe7\x06\xbe\x8b\xaa\xb5\xef\xc2\xe3\x5d\x78\xbc\xab\x3c\x07\xb1\xe4\xe9\xe4\xf1\x5c\x2c\x9d\x39\xdd\x49\x18\x26\x29\x7b\x22\x31\x68\x41\x73\xa7\x32\x43\xc9\x4c\xfa\x10\x41\x7b\xf7\xec\xd9\x19\xeb\x24\x13\x9d\x30\x01\xb4\x1d\xb0\x21\xb7\x41\xa6\xb2\x0d\x65\x67\x6c\x27\x3d\xde\x09\xed\x9d\xd0\x82\xdc\x86\xc7\x54\xee\x40\xd9\x56\x2a\x9d\x1d\xef\x50\x76\xbc\xc3\xd9\xf1\x0e\x6a\xb4\x83\x6c\x41\xda\x81\xb2\x1d\x70\x5b\x07\x4c\xc9\x72\x57\x6c\x07\xaa\xed\x80\xe7\x21\xb7\xc9\x32\x12\x6b\xc7\xe3\x76\x3c\x86\xdc\x66\xe0\x6d\x68\xbd\x0d\xcf\x21\xb7\x41\xa6\xb2\x33\xd6\xde\x4a\x03\x6d\x37\xd2\xd7\x5d\xff\x1e\xf2\x09\x25\xbb\xcc\xff\x26\x95\xcf\xf1\x73\x8e\x70\xca\xa5\xff\xd8\x31\xb8\x7c\x9f\xc0\x7f\xfc\x4a\x6b\x93\xe6\xad\x9f\x67\x38\xa3\xe5\xa2\x4e\x13\x4a\x56\x3b\x80\x0d\xc4\xb8\x17\x79\x04\xef\x03\x0d\x7d\x03\x5f\x71\xe9\xbf\xc1\xcf\xf9\xf9\x92\xdb\xff\xa9\x50\xdb\x4f\xc1\x7e\x9f\xc5\x7e\x40\x61\xff\x2d\x17\xfb\x13\x68\xb4\xd2\xf8\x0b\x2e\xf6\xaf\x28\xc6\x5f\xab\xb0\x7f\xd6\xc5\x7e\x10\x7c\x20\x55\x61\xfc\xdf\x74\xb1\xbf\x00\xfb\x07\x2d\xf6\xeb\x14\xf6\x17\x5c\xe6\x3f\x43\x9f\x0d\x97\xef\x99\xdc\xec\x5f\x73\x99\xff\xe6\x2f\x51\x39\x61\xb1\xbf\x51\x61\xff\x7f\x5c\xec\xb7\x1a\x14\x78\x93\xb7\xfd\xff\x72\xb1\x7f\x05\xf6\xc7\x2c\xf6\x37\x29\xec\xff\x9a\x8b\xff\x5b\x5b\xa8\xcc\xd4\x79\xdb\x7f\xc4\xc5\xff\x91\x1e\x2a\xad\xfe\x6f\x50\xd8\x3f\xef\x32\xfe\xa9\x1d\x54\x2e\x08\x6f\xfb\x93\x2e\xe3\x9f\x84\xfd\x26\x8b\xfd\xfb\x14\xf6\x5f\x75\xb1\x9f\xc2\xdf\x65\xf2\xfb\x02\x6e\xff\x1b\x6e\xfe\x87\xfd\x56\x8b\xfd\x2d\x0a\xfb\x07\xfd\x64\x9f\xe7\xc0\x65\x7c\xaf\xc3\xbf\x2b\xe0\xf9\xeb\xa2\x4f\xad\x2f\x76\x55\xa7\x9f\x73\xb1\xdf\x18\xa9\x4e\xff\x1d\x17\xfb\xad\xbb\xab\xd3\x1f\x77\xb1\xdf\x1d\xad\x4e\xff\x9f\x5c\xec\x1f\x7c\xaa\x3a\xfd\x2e\xa1\xd6\xcf\x3f\x5d\x9d\xfe\x6e\x4d\xad\x3f\xf1\x4c\x75\xfa\x8f\xba\xe8\xcf\x3e\x5b\x9d\x7e\xc0\x65\xfc\xf3\x9f\x57\xd7\xe7\xfb\xe7\x97\x5d\xec\x5f\x73\xd1\xe7\xf2\x7d\xb0\xcf\xae\x99\xc4\x02\xf4\x2b\xad\xdf\x4d\x3e\xf5\xfa\x59\xc6\xfa\xb1\xe6\xcf\x26\xc5\xfa\x79\xd4\xe7\xb4\x2d\xf5\xb0\x81\x1b\xf7\x92\xa5\x3e\x7e\xde\xa2\x6f\xdc\xd8\xfc\x7f\x00\x00\x00\xff\xff\xd6\xa5\x31\xa8\x80\x58\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 22656, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

